Constructors - If you're making a lot of similar objects you can use a constructor function 
to generate new objects of the same kind.

Constructors:
    - Describe how an object should be created
    - Create Similar objects
    - Each object created is an instance of that object type
    
    
Example: 

    function Contact(name, email) {
    this.name = name;
    this.email = email;
    }
    
    // this inside of the constructor means a new instance of the object
    
    var contact1 = new Contact('Bill', 'bill@hotmail.com')
    var contact2 = new Contact('fred', 'fred@hotmail.com')
    
    Object examples:
    
    Media Player
        - playlist objects
        - song object
    
    Adventure Game 
        - player object
        - monster object
        - level object
        
        
        
        
        
----------------------------------------------------------------------------------
DICE CONSTRUCTOR FUNCTION 

function Dice(sides){
    this.sides = sides;
    this.roll = function() {
        var randomNumber = Math.floor(Math.random() * this.sides) + 1;
        return randomNumber;
    }
}
   
var dice = new Dice(6);

------------------------------------------------------------------------------------
Methods with Prototypes
    - Every time you create a new instance with 'new', it takes more memory/space on your computer
    
Update to Dice Constructor
    // separate anonymous function 
    function diceRoll() {
        var randomNumber = Math.floor(Math.random() * this.sides) + 1;
        return randomNumber;
    }
    
    function Dice(sides){
        this.sides = sides;
        this.roll = diceRoll;
    }
    
    var dice = new Dice(6);
    var dice10 = new Dice(10);
    
    console.log(dice.roll === dice10.roll) // false
    
      //  JavaScript provides a way to organize our code with constructor functions, and that
        with a special property called prototype.
        
      // Updated code
       Dice.prototype.roll = function diceRoll() {
            var randomNumber = Math.floor(Math.random() * this.sides) + 1;
            return randomNumber;
       }
        
    
       // When you call Dice.roll, it will try to call it on the object first
       // If it's not there, it will check its prototype 
       
       var dice = new Dice(6);
       var dice10 = new Dice(10);
       console.log(dice.roll === dice10.roll) // true, due to prototype
